---
title: "SAR11 Bacteria Comparative Genomics Project"
author: "Susan Garcia"
date: "June 1st, 2023"
format: revealjs
output:
    theme: "moon"
    highlightStyle: "github"
---

```{r setup, include = FALSE}
library(knitr)
library(tidyverse)
library(kableExtra)
library(reshape2)
library(Biostrings)
knitr::opts_chunk$set(
  echo = TRUE,         # Display code chunks
  eval = FALSE,         # Evaluate code chunks
  warning = FALSE,     # Hide warnings
  message = FALSE,     # Hide messages
  fig.width = 6,       # Set plot width in inches
  fig.height = 4,      # Set plot height in inches
  fig.align = "center" # Align plots to the center
)
```

# Introduction

## SAR11 Bacteria

\- SAR11 is a group of small, carbon-oxidizing bacteria

\- Estimated population size of 2.4Ã—10\^28 cells, approximately 25% of all plankton

\- Key role in the ocean's environment

## Objective

\- Comparative genomics project to identify presence and absence of SAR11 genomes

\- Genomes obtained from NCBI database

# Workflow

## Workflow Steps

1\. Data acquisition from NCBI database

2\. Genome assembly and quality assessment

3\. Comparative analysis of SAR11 genomes

4\. Visualization

## Combined Tables for Comparison

```{r, echo = TRUE}
# Join the data frames
joinedtotal_df <- bind_rows(joined1_df, joined2_df, joined3_df, joined4_df, joined5_df, joined6_df)

#You may print the table with kable
#kable(head(joinedtotal_df, n = 10), caption = "Joined data frame with kable formatting (first 10 rows)") 

#Scrollable tables
datatable(head(joinedtotal_df), options = list(scrollX = TRUE, scrollY = "400px", scrollCollapse = TRUE, paging = FALSE)) 

```

# Protein Expression Analysis

## Basic Heatmap

\- Visualize protein expression levels using a basic heatmap

```{r, echo = TRUE}
# Summarize the data
summarized_df <- joinedtotal_df %>%
  group_by(Protein, Organism) %>%
  summarize(mean_value = mean(Score))

# Create a wide-format table
wide_df <- summarized_df %>%
  pivot_wider(names_from = Organism, values_from = mean_value)

# Exclude non-numeric columns
data_mat <- as.matrix(wide_df[, -1])

# Define custom color palette
my_palette <- colorRampPalette(c("darkblue", "white", "darkred"))(n = 100)

# Generate the heatmap with custom colors and row names
heatmap(data_mat, Rowv = NA, Colv = NA, col = my_palette, scale = "column",
        labRow = wide_df$Protein)

```

## Protein Expression Heatmap

```{r, echo = TRUE}
# Summarize the data
summarized_df <- joinedtotal_df %>%
  group_by(Protein, Organism) %>%
  summarize(mean_value = mean(Score))

# Create a wide-format table
wide_df <- summarized_df %>%
  pivot_wider(names_from = Organism, values_from = mean_value)

# Exclude non-numeric columns
data_mat <- as.matrix(wide_df[, -1])

# Handle missing, infinite, and NaN values
data_mat[is.na(data_mat)] <- 0  # Replace missing values with 0 or use appropriate imputation method
data_mat[!is.finite(data_mat)] <- 0  # Replace infinite and NaN values with 0 or other appropriate values

# Define custom color palette
my_palette <- colorRampPalette(c("darkblue", "white", "darkred"))(n = 100)

# Increase figure size and adjust margins
options(repr.plot.width = 10, repr.plot.height = 6)
par(mar = c(6, 4, 3, 2))

# Generate the heatmap with custom colors, row names, dendrograms, and color legend
heatmap(data_mat, Rowv = TRUE, Colv = TRUE, col = my_palette, scale = "column",
        labRow = wide_df$Protein, cex.lab = 0.6, cex.axis = 0.6, cex.main = 0.9,
        main = "Heatmap of Protein Expression",
        xlab = "Organism")

# Add color legend
legend("bottomleft", legend = c("Low", "Medium", "High"), fill = my_palette[seq(1, 100, length.out = 3)],
       bty = "n", cex = 0.8)

# Adjust plot margins
par(mar = c(6, 4, 3, 2))

```

# Comparative Analysis

## Protein Hits

```{r, echo = TRUE}
# Create a list to store the data frames for each figure
top_10_strings_list <- list()

# Loop through each figure
for (i in 1:6) {
  # Read joined blast table with annotation table
  joined_df <- left_join(get(paste0("bltabl", i, "_2.0_df")), spgo, by = "Database")
  
  # Select the column of interest
  column_name <- "Protein"  # Replace with the name of the column of interest
  column_data <- joined_df[[column_name]]
  
  # Count the occurrences of the strings in the column
  string_counts <- table(column_data)
  
  # Convert to a data frame, sort by count, and select the top 10
  string_counts_df <- as.data.frame(string_counts)
  colnames(string_counts_df) <- c("String", "Count")
  string_counts_df <- string_counts_df[order(string_counts_df$Count, decreasing = TRUE), ]
  top_10_strings <- head(string_counts_df, n = 10)
  
  # Store the top 10 strings data frame in the list
  top_10_strings_list[[i]] <- top_10_strings
}

# Combine all data frames into one data frame
combined_data <- do.call(rbind, top_10_strings_list)

# Create a new column to identify the figure number
combined_data$Figure <- rep(1:6, each = 10)

# Increase figure size
options(repr.plot.width = 10, repr.plot.height = 6)

# Plot the combined data using facet_wrap()
ggplot(combined_data, aes(x = reorder(String, -Count), y = Count, fill = String)) +
  geom_bar(stat = "identity", position = "dodge", color = "black") +
  labs(title = "Top 10 Protein hits",
       x = column_name,
       y = "Count") +
  theme_minimal() +
  theme(legend.position = "none",
        axis.text = element_text(size = 5),  # Adjust text size for axis labels
        axis.title = element_text(size = 10),  # Adjust text size for axis titles
        plot.title = element_text(size = 12)) +  # Adjust text size for plot title
  coord_flip() +
  facet_wrap(~ Figure, ncol = 3)
```

# Findings

## Key Findings

\- Compare protein expression levels across different organisms, where higher expression levels are represented by warmer colors (e.g., red) and lower expression levels by cooler colors (e.g., blue).

# Next Steps

## Future Directions

\- Gave better understanding of what proteins are lower highlighted and better understanding of the organism

\- Code is a pipeline and works pretty well with other genomes/protein sequences
